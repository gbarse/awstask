version: 0.2

phases:
  install:
    runtime-versions:
      java: corretto17
    commands:
      - echo "üîß  Installing SAM CLI ‚Ä¶"
      - pip install --quiet aws-sam-cli

  pre_build:
    commands:
      - echo "üîê  Logging in to ECR"
      - aws ecr get-login-password --region us-east-2 \
        | docker login --username AWS --password-stdin 151182332702.dkr.ecr.us-east-2.amazonaws.com
      # tag every image with the Git commit SHA so we can roll back if needed
      - IMAGE_TAG=${CODEBUILD_RESOLVED_SOURCE_VERSION:-latest}
      - IMAGE_URI=151182332702.dkr.ecr.us-east-2.amazonaws.com/gorb/aws-task:${IMAGE_TAG}
      - echo "Using tag $IMAGE_TAG"

  build:
    commands:
      - echo "üê≥  Building Docker image"
      - mvn -q clean package            # produces target/*.jar for the container **and** Lambda jar
      - awstask % docker build -t gorb/aws-task .
      - docker tag gorb/aws-task:latest 151182332702.dkr.ecr.us-east-2.amazonaws.com/gorb/aws-task:latest

      - echo "‚òÅÔ∏è  Packaging Lambda with SAM"
      - sam package \
          --template-file templateSAM.yml \
          --s3-bucket gor-barseghyan-site \
          --output-template-file packaged.yml

  post_build:
    commands:
      - echo "üì§  Pushing image to ECR"
      - docker push $IMAGE_URI
      - echo "üìù  Creating imagedefinitions.json for ECS"
      - printf '[{"name":"GorB-image-app","imageUri":"%s"}]' "$IMAGE_URI" > imagedefinitions.json

artifacts:
  secondary-artifacts:
    ecsArtifact:        # ‚¨ÖÔ∏è will feed the ECS deploy stage
      base-directory: .
      files:
        - imagedefinitions.json
    lambdaArtifact:     # ‚¨ÖÔ∏è will feed the Lambda deploy stage
      base-directory: .
      files:
        - packaged.yml
